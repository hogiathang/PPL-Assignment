# Generated from d:/HK242/PPL/Assignment/B1/PPL-ASSIGNMENT1-V4/src/main/minigo/parser/MiniGo.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,63,484,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,1,0,1,0,1,0,1,1,
        1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,
        1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,
        1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,
        1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,
        1,20,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,
        1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,31,
        1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,36,
        1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,
        1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,
        1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,5,52,
        337,8,52,10,52,12,52,340,9,52,1,53,1,53,1,53,1,53,3,53,346,8,53,
        1,54,1,54,1,54,5,54,351,8,54,10,54,12,54,354,9,54,3,54,356,8,54,
        1,55,1,55,1,55,4,55,361,8,55,11,55,12,55,362,1,56,1,56,1,56,4,56,
        368,8,56,11,56,12,56,369,1,56,1,56,4,56,374,8,56,11,56,12,56,375,
        3,56,378,8,56,1,57,1,57,1,57,4,57,383,8,57,11,57,12,57,384,1,58,
        1,58,1,58,3,58,390,8,58,1,58,3,58,393,8,58,1,58,3,58,396,8,58,1,
        59,4,59,399,8,59,11,59,12,59,400,1,60,1,60,3,60,405,8,60,1,60,4,
        60,408,8,60,11,60,12,60,409,1,61,1,61,1,61,5,61,415,8,61,10,61,12,
        61,418,9,61,1,61,1,61,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,5,
        63,430,8,63,10,63,12,63,433,9,63,1,63,1,63,1,63,1,63,1,63,1,64,1,
        64,1,64,1,64,5,64,444,8,64,10,64,12,64,447,9,64,1,64,1,64,1,65,4,
        65,452,8,65,11,65,12,65,453,1,65,1,65,1,66,1,66,1,66,1,67,1,67,1,
        67,5,67,464,8,67,10,67,12,67,467,9,67,1,67,3,67,470,8,67,1,68,1,
        68,1,68,5,68,475,8,68,10,68,12,68,478,9,68,1,68,1,68,1,68,1,69,1,
        69,1,431,0,70,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
        23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
        45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,
        67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,
        89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,
        109,0,111,0,113,0,115,0,117,55,119,0,121,0,123,56,125,0,127,57,129,
        58,131,59,133,60,135,61,137,62,139,63,1,0,17,3,0,65,90,95,95,97,
        122,4,0,48,57,65,90,95,95,97,122,1,0,49,57,1,0,48,57,2,0,66,66,98,
        98,1,0,48,49,2,0,79,79,111,111,1,0,48,55,2,0,88,88,120,120,3,0,48,
        57,65,70,97,102,2,0,69,69,101,101,2,0,43,43,45,45,4,0,10,10,13,13,
        34,34,92,92,5,0,34,34,92,92,110,110,114,114,116,116,2,0,10,10,13,
        13,3,0,9,9,12,13,32,32,2,1,10,10,13,13,503,0,1,1,0,0,0,0,3,1,0,0,
        0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
        0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
        0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
        0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,
        0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,
        0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,
        0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,
        0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,
        0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,
        0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,
        0,0,105,1,0,0,0,0,107,1,0,0,0,0,117,1,0,0,0,0,123,1,0,0,0,0,127,
        1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,
        0,137,1,0,0,0,0,139,1,0,0,0,1,141,1,0,0,0,3,144,1,0,0,0,5,149,1,
        0,0,0,7,153,1,0,0,0,9,160,1,0,0,0,11,165,1,0,0,0,13,170,1,0,0,0,
        15,177,1,0,0,0,17,187,1,0,0,0,19,194,1,0,0,0,21,198,1,0,0,0,23,204,
        1,0,0,0,25,212,1,0,0,0,27,217,1,0,0,0,29,223,1,0,0,0,31,227,1,0,
        0,0,33,233,1,0,0,0,35,237,1,0,0,0,37,246,1,0,0,0,39,252,1,0,0,0,
        41,258,1,0,0,0,43,260,1,0,0,0,45,263,1,0,0,0,47,265,1,0,0,0,49,267,
        1,0,0,0,51,269,1,0,0,0,53,271,1,0,0,0,55,273,1,0,0,0,57,276,1,0,
        0,0,59,279,1,0,0,0,61,281,1,0,0,0,63,284,1,0,0,0,65,286,1,0,0,0,
        67,289,1,0,0,0,69,292,1,0,0,0,71,295,1,0,0,0,73,297,1,0,0,0,75,300,
        1,0,0,0,77,303,1,0,0,0,79,306,1,0,0,0,81,309,1,0,0,0,83,312,1,0,
        0,0,85,314,1,0,0,0,87,316,1,0,0,0,89,318,1,0,0,0,91,320,1,0,0,0,
        93,322,1,0,0,0,95,324,1,0,0,0,97,326,1,0,0,0,99,328,1,0,0,0,101,
        330,1,0,0,0,103,332,1,0,0,0,105,334,1,0,0,0,107,345,1,0,0,0,109,
        355,1,0,0,0,111,357,1,0,0,0,113,377,1,0,0,0,115,379,1,0,0,0,117,
        386,1,0,0,0,119,398,1,0,0,0,121,402,1,0,0,0,123,411,1,0,0,0,125,
        421,1,0,0,0,127,424,1,0,0,0,129,439,1,0,0,0,131,451,1,0,0,0,133,
        457,1,0,0,0,135,460,1,0,0,0,137,471,1,0,0,0,139,482,1,0,0,0,141,
        142,5,105,0,0,142,143,5,102,0,0,143,2,1,0,0,0,144,145,5,101,0,0,
        145,146,5,108,0,0,146,147,5,115,0,0,147,148,5,101,0,0,148,4,1,0,
        0,0,149,150,5,102,0,0,150,151,5,111,0,0,151,152,5,114,0,0,152,6,
        1,0,0,0,153,154,5,114,0,0,154,155,5,101,0,0,155,156,5,116,0,0,156,
        157,5,117,0,0,157,158,5,114,0,0,158,159,5,110,0,0,159,8,1,0,0,0,
        160,161,5,102,0,0,161,162,5,117,0,0,162,163,5,110,0,0,163,164,5,
        99,0,0,164,10,1,0,0,0,165,166,5,116,0,0,166,167,5,121,0,0,167,168,
        5,112,0,0,168,169,5,101,0,0,169,12,1,0,0,0,170,171,5,115,0,0,171,
        172,5,116,0,0,172,173,5,114,0,0,173,174,5,117,0,0,174,175,5,99,0,
        0,175,176,5,116,0,0,176,14,1,0,0,0,177,178,5,105,0,0,178,179,5,110,
        0,0,179,180,5,116,0,0,180,181,5,101,0,0,181,182,5,114,0,0,182,183,
        5,102,0,0,183,184,5,97,0,0,184,185,5,99,0,0,185,186,5,101,0,0,186,
        16,1,0,0,0,187,188,5,115,0,0,188,189,5,116,0,0,189,190,5,114,0,0,
        190,191,5,105,0,0,191,192,5,110,0,0,192,193,5,103,0,0,193,18,1,0,
        0,0,194,195,5,105,0,0,195,196,5,110,0,0,196,197,5,116,0,0,197,20,
        1,0,0,0,198,199,5,102,0,0,199,200,5,108,0,0,200,201,5,111,0,0,201,
        202,5,97,0,0,202,203,5,116,0,0,203,22,1,0,0,0,204,205,5,98,0,0,205,
        206,5,111,0,0,206,207,5,111,0,0,207,208,5,108,0,0,208,209,5,101,
        0,0,209,210,5,97,0,0,210,211,5,110,0,0,211,24,1,0,0,0,212,213,5,
        116,0,0,213,214,5,114,0,0,214,215,5,117,0,0,215,216,5,101,0,0,216,
        26,1,0,0,0,217,218,5,102,0,0,218,219,5,97,0,0,219,220,5,108,0,0,
        220,221,5,115,0,0,221,222,5,101,0,0,222,28,1,0,0,0,223,224,5,110,
        0,0,224,225,5,105,0,0,225,226,5,108,0,0,226,30,1,0,0,0,227,228,5,
        99,0,0,228,229,5,111,0,0,229,230,5,110,0,0,230,231,5,115,0,0,231,
        232,5,116,0,0,232,32,1,0,0,0,233,234,5,118,0,0,234,235,5,97,0,0,
        235,236,5,114,0,0,236,34,1,0,0,0,237,238,5,99,0,0,238,239,5,111,
        0,0,239,240,5,110,0,0,240,241,5,116,0,0,241,242,5,105,0,0,242,243,
        5,110,0,0,243,244,5,117,0,0,244,245,5,101,0,0,245,36,1,0,0,0,246,
        247,5,98,0,0,247,248,5,114,0,0,248,249,5,101,0,0,249,250,5,97,0,
        0,250,251,5,107,0,0,251,38,1,0,0,0,252,253,5,114,0,0,253,254,5,97,
        0,0,254,255,5,110,0,0,255,256,5,103,0,0,256,257,5,101,0,0,257,40,
        1,0,0,0,258,259,5,61,0,0,259,42,1,0,0,0,260,261,5,58,0,0,261,262,
        5,61,0,0,262,44,1,0,0,0,263,264,5,43,0,0,264,46,1,0,0,0,265,266,
        5,45,0,0,266,48,1,0,0,0,267,268,5,42,0,0,268,50,1,0,0,0,269,270,
        5,47,0,0,270,52,1,0,0,0,271,272,5,37,0,0,272,54,1,0,0,0,273,274,
        5,61,0,0,274,275,5,61,0,0,275,56,1,0,0,0,276,277,5,33,0,0,277,278,
        5,61,0,0,278,58,1,0,0,0,279,280,5,60,0,0,280,60,1,0,0,0,281,282,
        5,60,0,0,282,283,5,61,0,0,283,62,1,0,0,0,284,285,5,62,0,0,285,64,
        1,0,0,0,286,287,5,62,0,0,287,288,5,61,0,0,288,66,1,0,0,0,289,290,
        5,38,0,0,290,291,5,38,0,0,291,68,1,0,0,0,292,293,5,124,0,0,293,294,
        5,124,0,0,294,70,1,0,0,0,295,296,5,33,0,0,296,72,1,0,0,0,297,298,
        5,43,0,0,298,299,5,61,0,0,299,74,1,0,0,0,300,301,5,45,0,0,301,302,
        5,61,0,0,302,76,1,0,0,0,303,304,5,42,0,0,304,305,5,61,0,0,305,78,
        1,0,0,0,306,307,5,47,0,0,307,308,5,61,0,0,308,80,1,0,0,0,309,310,
        5,37,0,0,310,311,5,61,0,0,311,82,1,0,0,0,312,313,5,46,0,0,313,84,
        1,0,0,0,314,315,5,95,0,0,315,86,1,0,0,0,316,317,5,40,0,0,317,88,
        1,0,0,0,318,319,5,41,0,0,319,90,1,0,0,0,320,321,5,123,0,0,321,92,
        1,0,0,0,322,323,5,125,0,0,323,94,1,0,0,0,324,325,5,91,0,0,325,96,
        1,0,0,0,326,327,5,93,0,0,327,98,1,0,0,0,328,329,5,44,0,0,329,100,
        1,0,0,0,330,331,5,59,0,0,331,102,1,0,0,0,332,333,5,58,0,0,333,104,
        1,0,0,0,334,338,7,0,0,0,335,337,7,1,0,0,336,335,1,0,0,0,337,340,
        1,0,0,0,338,336,1,0,0,0,338,339,1,0,0,0,339,106,1,0,0,0,340,338,
        1,0,0,0,341,346,3,109,54,0,342,346,3,111,55,0,343,346,3,113,56,0,
        344,346,3,115,57,0,345,341,1,0,0,0,345,342,1,0,0,0,345,343,1,0,0,
        0,345,344,1,0,0,0,346,108,1,0,0,0,347,356,5,48,0,0,348,352,7,2,0,
        0,349,351,7,3,0,0,350,349,1,0,0,0,351,354,1,0,0,0,352,350,1,0,0,
        0,352,353,1,0,0,0,353,356,1,0,0,0,354,352,1,0,0,0,355,347,1,0,0,
        0,355,348,1,0,0,0,356,110,1,0,0,0,357,358,5,48,0,0,358,360,7,4,0,
        0,359,361,7,5,0,0,360,359,1,0,0,0,361,362,1,0,0,0,362,360,1,0,0,
        0,362,363,1,0,0,0,363,112,1,0,0,0,364,365,5,48,0,0,365,367,7,6,0,
        0,366,368,7,7,0,0,367,366,1,0,0,0,368,369,1,0,0,0,369,367,1,0,0,
        0,369,370,1,0,0,0,370,378,1,0,0,0,371,373,5,48,0,0,372,374,7,7,0,
        0,373,372,1,0,0,0,374,375,1,0,0,0,375,373,1,0,0,0,375,376,1,0,0,
        0,376,378,1,0,0,0,377,364,1,0,0,0,377,371,1,0,0,0,378,114,1,0,0,
        0,379,380,5,48,0,0,380,382,7,8,0,0,381,383,7,9,0,0,382,381,1,0,0,
        0,383,384,1,0,0,0,384,382,1,0,0,0,384,385,1,0,0,0,385,116,1,0,0,
        0,386,395,3,119,59,0,387,389,5,46,0,0,388,390,3,119,59,0,389,388,
        1,0,0,0,389,390,1,0,0,0,390,392,1,0,0,0,391,393,3,121,60,0,392,391,
        1,0,0,0,392,393,1,0,0,0,393,396,1,0,0,0,394,396,3,121,60,0,395,387,
        1,0,0,0,395,394,1,0,0,0,396,118,1,0,0,0,397,399,7,3,0,0,398,397,
        1,0,0,0,399,400,1,0,0,0,400,398,1,0,0,0,400,401,1,0,0,0,401,120,
        1,0,0,0,402,404,7,10,0,0,403,405,7,11,0,0,404,403,1,0,0,0,404,405,
        1,0,0,0,405,407,1,0,0,0,406,408,7,3,0,0,407,406,1,0,0,0,408,409,
        1,0,0,0,409,407,1,0,0,0,409,410,1,0,0,0,410,122,1,0,0,0,411,416,
        5,34,0,0,412,415,3,125,62,0,413,415,8,12,0,0,414,412,1,0,0,0,414,
        413,1,0,0,0,415,418,1,0,0,0,416,414,1,0,0,0,416,417,1,0,0,0,417,
        419,1,0,0,0,418,416,1,0,0,0,419,420,5,34,0,0,420,124,1,0,0,0,421,
        422,5,92,0,0,422,423,7,13,0,0,423,126,1,0,0,0,424,425,5,47,0,0,425,
        426,5,42,0,0,426,431,1,0,0,0,427,430,3,127,63,0,428,430,9,0,0,0,
        429,427,1,0,0,0,429,428,1,0,0,0,430,433,1,0,0,0,431,432,1,0,0,0,
        431,429,1,0,0,0,432,434,1,0,0,0,433,431,1,0,0,0,434,435,5,42,0,0,
        435,436,5,47,0,0,436,437,1,0,0,0,437,438,6,63,0,0,438,128,1,0,0,
        0,439,440,5,47,0,0,440,441,5,47,0,0,441,445,1,0,0,0,442,444,8,14,
        0,0,443,442,1,0,0,0,444,447,1,0,0,0,445,443,1,0,0,0,445,446,1,0,
        0,0,446,448,1,0,0,0,447,445,1,0,0,0,448,449,6,64,0,0,449,130,1,0,
        0,0,450,452,7,15,0,0,451,450,1,0,0,0,452,453,1,0,0,0,453,451,1,0,
        0,0,453,454,1,0,0,0,454,455,1,0,0,0,455,456,6,65,0,0,456,132,1,0,
        0,0,457,458,5,10,0,0,458,459,6,66,1,0,459,134,1,0,0,0,460,465,5,
        34,0,0,461,464,3,125,62,0,462,464,8,12,0,0,463,461,1,0,0,0,463,462,
        1,0,0,0,464,467,1,0,0,0,465,463,1,0,0,0,465,466,1,0,0,0,466,469,
        1,0,0,0,467,465,1,0,0,0,468,470,7,16,0,0,469,468,1,0,0,0,470,136,
        1,0,0,0,471,476,5,34,0,0,472,475,3,125,62,0,473,475,8,12,0,0,474,
        472,1,0,0,0,474,473,1,0,0,0,475,478,1,0,0,0,476,474,1,0,0,0,476,
        477,1,0,0,0,477,479,1,0,0,0,478,476,1,0,0,0,479,480,5,92,0,0,480,
        481,8,13,0,0,481,138,1,0,0,0,482,483,9,0,0,0,483,140,1,0,0,0,27,
        0,338,345,352,355,362,369,375,377,384,389,392,395,400,404,409,414,
        416,429,431,445,453,463,465,469,474,476,2,6,0,0,1,66,0
    ]

class MiniGoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    ELSE = 2
    FOR = 3
    RETURN = 4
    FUNC = 5
    TYPE = 6
    STRUCT = 7
    INTERFACE = 8
    STRING = 9
    INT = 10
    FLOAT = 11
    BOOLEAN = 12
    TRUE = 13
    FALSE = 14
    NIL = 15
    CONST = 16
    VAR = 17
    CONTINUE = 18
    BREAK = 19
    RANGE = 20
    ASSIGN = 21
    DECLARE = 22
    PLUS = 23
    MINUS = 24
    MUL = 25
    DIV = 26
    MOD = 27
    EQ = 28
    NEQ = 29
    LT = 30
    LEQ = 31
    GT = 32
    GEQ = 33
    AND = 34
    OR = 35
    NOT = 36
    PLUS_ASSIGN = 37
    MINUS_ASSIGN = 38
    MUL_ASSIGN = 39
    DIV_ASSIGN = 40
    MOD_ASSIGN = 41
    DOT = 42
    BLANK = 43
    LPAREN = 44
    RPAREN = 45
    LBRACE = 46
    RBRACE = 47
    LBRACKET = 48
    RBRACKET = 49
    COMMA = 50
    SEMI = 51
    COLON = 52
    IDENTIFIER = 53
    INT_LIT = 54
    FLOAT_LIT = 55
    STRING_LIT = 56
    BLOCK_COMMENT = 57
    LINE_COMMENT = 58
    WS = 59
    NEWLINE = 60
    UNCLOSE_STRING = 61
    ILLEGAL_ESCAPE = 62
    ERROR_CHAR = 63

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'for'", "'return'", "'func'", "'type'", "'struct'", 
            "'interface'", "'string'", "'int'", "'float'", "'boolean'", 
            "'true'", "'false'", "'nil'", "'const'", "'var'", "'continue'", 
            "'break'", "'range'", "'='", "':='", "'+'", "'-'", "'*'", "'/'", 
            "'%'", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'&&'", 
            "'||'", "'!'", "'+='", "'-='", "'*='", "'/='", "'%='", "'.'", 
            "'_'", "'('", "')'", "'{'", "'}'", "'['", "']'", "','", "';'", 
            "':'", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", "INTERFACE", 
            "STRING", "INT", "FLOAT", "BOOLEAN", "TRUE", "FALSE", "NIL", 
            "CONST", "VAR", "CONTINUE", "BREAK", "RANGE", "ASSIGN", "DECLARE", 
            "PLUS", "MINUS", "MUL", "DIV", "MOD", "EQ", "NEQ", "LT", "LEQ", 
            "GT", "GEQ", "AND", "OR", "NOT", "PLUS_ASSIGN", "MINUS_ASSIGN", 
            "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "DOT", "BLANK", "LPAREN", 
            "RPAREN", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "COMMA", 
            "SEMI", "COLON", "IDENTIFIER", "INT_LIT", "FLOAT_LIT", "STRING_LIT", 
            "BLOCK_COMMENT", "LINE_COMMENT", "WS", "NEWLINE", "UNCLOSE_STRING", 
            "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    ruleNames = [ "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", 
                  "INTERFACE", "STRING", "INT", "FLOAT", "BOOLEAN", "TRUE", 
                  "FALSE", "NIL", "CONST", "VAR", "CONTINUE", "BREAK", "RANGE", 
                  "ASSIGN", "DECLARE", "PLUS", "MINUS", "MUL", "DIV", "MOD", 
                  "EQ", "NEQ", "LT", "LEQ", "GT", "GEQ", "AND", "OR", "NOT", 
                  "PLUS_ASSIGN", "MINUS_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
                  "MOD_ASSIGN", "DOT", "BLANK", "LPAREN", "RPAREN", "LBRACE", 
                  "RBRACE", "LBRACKET", "RBRACKET", "COMMA", "SEMI", "COLON", 
                  "IDENTIFIER", "INT_LIT", "DEC_LIT", "BIN_LIT", "OCT_LIT", 
                  "HEX_LIT", "FLOAT_LIT", "DEC_PART", "EXPONENT", "STRING_LIT", 
                  "ESC_SEQ", "BLOCK_COMMENT", "LINE_COMMENT", "WS", "NEWLINE", 
                  "UNCLOSE_STRING", "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    grammarFileName = "MiniGo.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    lastTokenType = None;
    def emit(self):
        tk = self.type
        self.lastTokenType = tk
        if tk == self.UNCLOSE_STRING:       
            result = super().emit();
            raise UncloseString(result.text);
        elif tk == self.ILLEGAL_ESCAPE:
            result = super().emit();
            raise IllegalEscape(result.text);
        elif tk == self.ERROR_CHAR:
            result = super().emit();
            raise ErrorToken(result.text); 
        else:
            return super().emit();


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[66] = self.NEWLINE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def NEWLINE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:

                listAllowedToken = [
                    self.IDENTIFIER, self.INT_LIT, self.FLOAT_LIT, self.STRING_LIT,
                    self.RPAREN, self.RBRACE, self.RBRACKET,
                    self.INT, self.FLOAT, self.STRING, self.BOOLEAN,
                    self.TRUE, self.FALSE, self.BREAK, self.CONTINUE, self.RETURN, self.NIL
                ];
                if self.lastTokenType in listAllowedToken:
                    self.text = ';';
                else:
                    self.skip();

     


