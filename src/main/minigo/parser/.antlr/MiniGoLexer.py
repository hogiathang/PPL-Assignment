# Generated from d:/HK242/PPL/Assignment/B1/initial/src/main/minigo/parser/MiniGo.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,64,492,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,1,0,1,
        0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,
        6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,
        1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,
        1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,
        1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,
        1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,
        1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,29,1,29,
        1,29,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,34,1,34,
        1,34,1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,
        1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,43,1,43,1,44,
        1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,
        1,51,1,51,1,52,1,52,1,53,1,53,5,53,344,8,53,10,53,12,53,347,9,53,
        1,54,1,54,1,54,1,54,3,54,353,8,54,1,55,1,55,1,55,5,55,358,8,55,10,
        55,12,55,361,9,55,3,55,363,8,55,1,56,1,56,1,56,4,56,368,8,56,11,
        56,12,56,369,1,57,1,57,1,57,4,57,375,8,57,11,57,12,57,376,1,57,1,
        57,4,57,381,8,57,11,57,12,57,382,3,57,385,8,57,1,58,1,58,1,58,4,
        58,390,8,58,11,58,12,58,391,1,59,1,59,1,59,3,59,397,8,59,1,59,3,
        59,400,8,59,1,59,3,59,403,8,59,1,60,4,60,406,8,60,11,60,12,60,407,
        1,61,1,61,3,61,412,8,61,1,61,4,61,415,8,61,11,61,12,61,416,1,62,
        1,62,1,62,5,62,422,8,62,10,62,12,62,425,9,62,1,62,1,62,1,62,1,63,
        1,63,1,63,1,64,1,64,1,64,1,64,1,64,5,64,438,8,64,10,64,12,64,441,
        9,64,1,64,1,64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,5,65,452,8,65,
        10,65,12,65,455,9,65,1,65,1,65,1,66,4,66,460,8,66,11,66,12,66,461,
        1,66,1,66,1,67,1,67,1,67,1,68,1,68,1,68,5,68,472,8,68,10,68,12,68,
        475,9,68,1,68,1,68,1,69,1,69,1,69,5,69,482,8,69,10,69,12,69,485,
        9,69,1,69,1,69,1,69,1,69,1,70,1,70,1,439,0,71,1,1,3,2,5,3,7,4,9,
        5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
        33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
        55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,
        77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,
        99,50,101,51,103,52,105,53,107,54,109,55,111,0,113,0,115,0,117,0,
        119,56,121,0,123,0,125,57,127,0,129,58,131,59,133,60,135,61,137,
        62,139,63,141,64,1,0,16,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,
        95,97,122,1,0,49,57,1,0,48,57,2,0,66,66,98,98,1,0,48,49,2,0,79,79,
        111,111,1,0,48,55,2,0,88,88,120,120,3,0,48,57,65,70,97,102,2,0,69,
        69,101,101,2,0,43,43,45,45,4,0,10,10,13,13,34,34,92,92,5,0,34,34,
        92,92,110,110,114,114,116,116,2,0,10,10,13,13,3,0,9,9,12,13,32,32,
        511,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
        0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
        0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,
        0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,
        0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,
        0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,
        0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,
        0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,
        0,0,0,0,119,1,0,0,0,0,125,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,
        133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,
        0,0,1,143,1,0,0,0,3,148,1,0,0,0,5,151,1,0,0,0,7,156,1,0,0,0,9,160,
        1,0,0,0,11,167,1,0,0,0,13,172,1,0,0,0,15,177,1,0,0,0,17,184,1,0,
        0,0,19,194,1,0,0,0,21,201,1,0,0,0,23,205,1,0,0,0,25,211,1,0,0,0,
        27,219,1,0,0,0,29,224,1,0,0,0,31,230,1,0,0,0,33,234,1,0,0,0,35,240,
        1,0,0,0,37,244,1,0,0,0,39,253,1,0,0,0,41,259,1,0,0,0,43,265,1,0,
        0,0,45,267,1,0,0,0,47,270,1,0,0,0,49,272,1,0,0,0,51,274,1,0,0,0,
        53,276,1,0,0,0,55,278,1,0,0,0,57,280,1,0,0,0,59,283,1,0,0,0,61,286,
        1,0,0,0,63,288,1,0,0,0,65,291,1,0,0,0,67,293,1,0,0,0,69,296,1,0,
        0,0,71,299,1,0,0,0,73,302,1,0,0,0,75,304,1,0,0,0,77,307,1,0,0,0,
        79,310,1,0,0,0,81,313,1,0,0,0,83,316,1,0,0,0,85,319,1,0,0,0,87,321,
        1,0,0,0,89,323,1,0,0,0,91,325,1,0,0,0,93,327,1,0,0,0,95,329,1,0,
        0,0,97,331,1,0,0,0,99,333,1,0,0,0,101,335,1,0,0,0,103,337,1,0,0,
        0,105,339,1,0,0,0,107,341,1,0,0,0,109,352,1,0,0,0,111,362,1,0,0,
        0,113,364,1,0,0,0,115,384,1,0,0,0,117,386,1,0,0,0,119,393,1,0,0,
        0,121,405,1,0,0,0,123,409,1,0,0,0,125,418,1,0,0,0,127,429,1,0,0,
        0,129,432,1,0,0,0,131,447,1,0,0,0,133,459,1,0,0,0,135,465,1,0,0,
        0,137,468,1,0,0,0,139,478,1,0,0,0,141,490,1,0,0,0,143,144,5,109,
        0,0,144,145,5,97,0,0,145,146,5,105,0,0,146,147,5,110,0,0,147,2,1,
        0,0,0,148,149,5,105,0,0,149,150,5,102,0,0,150,4,1,0,0,0,151,152,
        5,101,0,0,152,153,5,108,0,0,153,154,5,115,0,0,154,155,5,101,0,0,
        155,6,1,0,0,0,156,157,5,102,0,0,157,158,5,111,0,0,158,159,5,114,
        0,0,159,8,1,0,0,0,160,161,5,114,0,0,161,162,5,101,0,0,162,163,5,
        116,0,0,163,164,5,117,0,0,164,165,5,114,0,0,165,166,5,110,0,0,166,
        10,1,0,0,0,167,168,5,102,0,0,168,169,5,117,0,0,169,170,5,110,0,0,
        170,171,5,99,0,0,171,12,1,0,0,0,172,173,5,116,0,0,173,174,5,121,
        0,0,174,175,5,112,0,0,175,176,5,101,0,0,176,14,1,0,0,0,177,178,5,
        115,0,0,178,179,5,116,0,0,179,180,5,114,0,0,180,181,5,117,0,0,181,
        182,5,99,0,0,182,183,5,116,0,0,183,16,1,0,0,0,184,185,5,105,0,0,
        185,186,5,110,0,0,186,187,5,116,0,0,187,188,5,101,0,0,188,189,5,
        114,0,0,189,190,5,102,0,0,190,191,5,97,0,0,191,192,5,99,0,0,192,
        193,5,101,0,0,193,18,1,0,0,0,194,195,5,115,0,0,195,196,5,116,0,0,
        196,197,5,114,0,0,197,198,5,105,0,0,198,199,5,110,0,0,199,200,5,
        103,0,0,200,20,1,0,0,0,201,202,5,105,0,0,202,203,5,110,0,0,203,204,
        5,116,0,0,204,22,1,0,0,0,205,206,5,102,0,0,206,207,5,108,0,0,207,
        208,5,111,0,0,208,209,5,97,0,0,209,210,5,116,0,0,210,24,1,0,0,0,
        211,212,5,98,0,0,212,213,5,111,0,0,213,214,5,111,0,0,214,215,5,108,
        0,0,215,216,5,101,0,0,216,217,5,97,0,0,217,218,5,110,0,0,218,26,
        1,0,0,0,219,220,5,116,0,0,220,221,5,114,0,0,221,222,5,117,0,0,222,
        223,5,101,0,0,223,28,1,0,0,0,224,225,5,102,0,0,225,226,5,97,0,0,
        226,227,5,108,0,0,227,228,5,115,0,0,228,229,5,101,0,0,229,30,1,0,
        0,0,230,231,5,110,0,0,231,232,5,105,0,0,232,233,5,108,0,0,233,32,
        1,0,0,0,234,235,5,99,0,0,235,236,5,111,0,0,236,237,5,110,0,0,237,
        238,5,115,0,0,238,239,5,116,0,0,239,34,1,0,0,0,240,241,5,118,0,0,
        241,242,5,97,0,0,242,243,5,114,0,0,243,36,1,0,0,0,244,245,5,99,0,
        0,245,246,5,111,0,0,246,247,5,110,0,0,247,248,5,116,0,0,248,249,
        5,105,0,0,249,250,5,110,0,0,250,251,5,117,0,0,251,252,5,101,0,0,
        252,38,1,0,0,0,253,254,5,98,0,0,254,255,5,114,0,0,255,256,5,101,
        0,0,256,257,5,97,0,0,257,258,5,107,0,0,258,40,1,0,0,0,259,260,5,
        114,0,0,260,261,5,97,0,0,261,262,5,110,0,0,262,263,5,103,0,0,263,
        264,5,101,0,0,264,42,1,0,0,0,265,266,5,61,0,0,266,44,1,0,0,0,267,
        268,5,58,0,0,268,269,5,61,0,0,269,46,1,0,0,0,270,271,5,43,0,0,271,
        48,1,0,0,0,272,273,5,45,0,0,273,50,1,0,0,0,274,275,5,42,0,0,275,
        52,1,0,0,0,276,277,5,47,0,0,277,54,1,0,0,0,278,279,5,37,0,0,279,
        56,1,0,0,0,280,281,5,61,0,0,281,282,5,61,0,0,282,58,1,0,0,0,283,
        284,5,33,0,0,284,285,5,61,0,0,285,60,1,0,0,0,286,287,5,60,0,0,287,
        62,1,0,0,0,288,289,5,60,0,0,289,290,5,61,0,0,290,64,1,0,0,0,291,
        292,5,62,0,0,292,66,1,0,0,0,293,294,5,62,0,0,294,295,5,61,0,0,295,
        68,1,0,0,0,296,297,5,38,0,0,297,298,5,38,0,0,298,70,1,0,0,0,299,
        300,5,124,0,0,300,301,5,124,0,0,301,72,1,0,0,0,302,303,5,33,0,0,
        303,74,1,0,0,0,304,305,5,43,0,0,305,306,5,61,0,0,306,76,1,0,0,0,
        307,308,5,45,0,0,308,309,5,61,0,0,309,78,1,0,0,0,310,311,5,42,0,
        0,311,312,5,61,0,0,312,80,1,0,0,0,313,314,5,47,0,0,314,315,5,61,
        0,0,315,82,1,0,0,0,316,317,5,37,0,0,317,318,5,61,0,0,318,84,1,0,
        0,0,319,320,5,46,0,0,320,86,1,0,0,0,321,322,5,95,0,0,322,88,1,0,
        0,0,323,324,5,40,0,0,324,90,1,0,0,0,325,326,5,41,0,0,326,92,1,0,
        0,0,327,328,5,123,0,0,328,94,1,0,0,0,329,330,5,125,0,0,330,96,1,
        0,0,0,331,332,5,91,0,0,332,98,1,0,0,0,333,334,5,93,0,0,334,100,1,
        0,0,0,335,336,5,44,0,0,336,102,1,0,0,0,337,338,5,59,0,0,338,104,
        1,0,0,0,339,340,5,58,0,0,340,106,1,0,0,0,341,345,7,0,0,0,342,344,
        7,1,0,0,343,342,1,0,0,0,344,347,1,0,0,0,345,343,1,0,0,0,345,346,
        1,0,0,0,346,108,1,0,0,0,347,345,1,0,0,0,348,353,3,111,55,0,349,353,
        3,113,56,0,350,353,3,115,57,0,351,353,3,117,58,0,352,348,1,0,0,0,
        352,349,1,0,0,0,352,350,1,0,0,0,352,351,1,0,0,0,353,110,1,0,0,0,
        354,363,5,48,0,0,355,359,7,2,0,0,356,358,7,3,0,0,357,356,1,0,0,0,
        358,361,1,0,0,0,359,357,1,0,0,0,359,360,1,0,0,0,360,363,1,0,0,0,
        361,359,1,0,0,0,362,354,1,0,0,0,362,355,1,0,0,0,363,112,1,0,0,0,
        364,365,5,48,0,0,365,367,7,4,0,0,366,368,7,5,0,0,367,366,1,0,0,0,
        368,369,1,0,0,0,369,367,1,0,0,0,369,370,1,0,0,0,370,114,1,0,0,0,
        371,372,5,48,0,0,372,374,7,6,0,0,373,375,7,7,0,0,374,373,1,0,0,0,
        375,376,1,0,0,0,376,374,1,0,0,0,376,377,1,0,0,0,377,385,1,0,0,0,
        378,380,5,48,0,0,379,381,7,7,0,0,380,379,1,0,0,0,381,382,1,0,0,0,
        382,380,1,0,0,0,382,383,1,0,0,0,383,385,1,0,0,0,384,371,1,0,0,0,
        384,378,1,0,0,0,385,116,1,0,0,0,386,387,5,48,0,0,387,389,7,8,0,0,
        388,390,7,9,0,0,389,388,1,0,0,0,390,391,1,0,0,0,391,389,1,0,0,0,
        391,392,1,0,0,0,392,118,1,0,0,0,393,402,3,121,60,0,394,396,5,46,
        0,0,395,397,3,121,60,0,396,395,1,0,0,0,396,397,1,0,0,0,397,399,1,
        0,0,0,398,400,3,123,61,0,399,398,1,0,0,0,399,400,1,0,0,0,400,403,
        1,0,0,0,401,403,3,123,61,0,402,394,1,0,0,0,402,401,1,0,0,0,403,120,
        1,0,0,0,404,406,7,3,0,0,405,404,1,0,0,0,406,407,1,0,0,0,407,405,
        1,0,0,0,407,408,1,0,0,0,408,122,1,0,0,0,409,411,7,10,0,0,410,412,
        7,11,0,0,411,410,1,0,0,0,411,412,1,0,0,0,412,414,1,0,0,0,413,415,
        7,3,0,0,414,413,1,0,0,0,415,416,1,0,0,0,416,414,1,0,0,0,416,417,
        1,0,0,0,417,124,1,0,0,0,418,423,5,34,0,0,419,422,3,127,63,0,420,
        422,8,12,0,0,421,419,1,0,0,0,421,420,1,0,0,0,422,425,1,0,0,0,423,
        421,1,0,0,0,423,424,1,0,0,0,424,426,1,0,0,0,425,423,1,0,0,0,426,
        427,5,34,0,0,427,428,6,62,0,0,428,126,1,0,0,0,429,430,5,92,0,0,430,
        431,7,13,0,0,431,128,1,0,0,0,432,433,5,47,0,0,433,434,5,42,0,0,434,
        439,1,0,0,0,435,438,3,129,64,0,436,438,9,0,0,0,437,435,1,0,0,0,437,
        436,1,0,0,0,438,441,1,0,0,0,439,440,1,0,0,0,439,437,1,0,0,0,440,
        442,1,0,0,0,441,439,1,0,0,0,442,443,5,42,0,0,443,444,5,47,0,0,444,
        445,1,0,0,0,445,446,6,64,1,0,446,130,1,0,0,0,447,448,5,47,0,0,448,
        449,5,47,0,0,449,453,1,0,0,0,450,452,8,14,0,0,451,450,1,0,0,0,452,
        455,1,0,0,0,453,451,1,0,0,0,453,454,1,0,0,0,454,456,1,0,0,0,455,
        453,1,0,0,0,456,457,6,65,1,0,457,132,1,0,0,0,458,460,7,15,0,0,459,
        458,1,0,0,0,460,461,1,0,0,0,461,459,1,0,0,0,461,462,1,0,0,0,462,
        463,1,0,0,0,463,464,6,66,1,0,464,134,1,0,0,0,465,466,5,10,0,0,466,
        467,6,67,2,0,467,136,1,0,0,0,468,473,5,34,0,0,469,472,3,127,63,0,
        470,472,8,12,0,0,471,469,1,0,0,0,471,470,1,0,0,0,472,475,1,0,0,0,
        473,471,1,0,0,0,473,474,1,0,0,0,474,476,1,0,0,0,475,473,1,0,0,0,
        476,477,6,68,3,0,477,138,1,0,0,0,478,483,5,34,0,0,479,482,3,127,
        63,0,480,482,8,12,0,0,481,479,1,0,0,0,481,480,1,0,0,0,482,485,1,
        0,0,0,483,481,1,0,0,0,483,484,1,0,0,0,484,486,1,0,0,0,485,483,1,
        0,0,0,486,487,5,92,0,0,487,488,8,13,0,0,488,489,6,69,4,0,489,140,
        1,0,0,0,490,491,9,0,0,0,491,142,1,0,0,0,26,0,345,352,359,362,369,
        376,382,384,391,396,399,402,407,411,416,421,423,437,439,453,461,
        471,473,481,483,5,1,62,0,6,0,0,1,67,1,1,68,2,1,69,3
    ]

class MiniGoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    IF = 2
    ELSE = 3
    FOR = 4
    RETURN = 5
    FUNC = 6
    TYPE = 7
    STRUCT = 8
    INTERFACE = 9
    STRING = 10
    INT = 11
    FLOAT = 12
    BOOLEAN = 13
    TRUE = 14
    FALSE = 15
    NIL = 16
    CONST = 17
    VAR = 18
    CONTINUE = 19
    BREAK = 20
    RANGE = 21
    ASSIGN = 22
    DECLARE = 23
    PLUS = 24
    MINUS = 25
    MUL = 26
    DIV = 27
    MOD = 28
    EQ = 29
    NEQ = 30
    LT = 31
    LEQ = 32
    GT = 33
    GEQ = 34
    AND = 35
    OR = 36
    NOT = 37
    PLUS_ASSIGN = 38
    MINUS_ASSIGN = 39
    MUL_ASSIGN = 40
    DIV_ASSIGN = 41
    MOD_ASSIGN = 42
    DOT = 43
    BLANK = 44
    LPAREN = 45
    RPAREN = 46
    LBRACE = 47
    RBRACE = 48
    LBRACKET = 49
    RBRACKET = 50
    COMMA = 51
    SEMI = 52
    COLON = 53
    IDENTIFIER = 54
    INT_LIT = 55
    FLOAT_LIT = 56
    STRING_LIT = 57
    BLOCK_COMMENT = 58
    LINE_COMMENT = 59
    WS = 60
    NEWLINE = 61
    UNCLOSE_STRING = 62
    ILLEGAL_ESCAPE = 63
    ERROR_CHAR = 64

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'main'", "'if'", "'else'", "'for'", "'return'", "'func'", "'type'", 
            "'struct'", "'interface'", "'string'", "'int'", "'float'", "'boolean'", 
            "'true'", "'false'", "'nil'", "'const'", "'var'", "'continue'", 
            "'break'", "'range'", "'='", "':='", "'+'", "'-'", "'*'", "'/'", 
            "'%'", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'&&'", 
            "'||'", "'!'", "'+='", "'-='", "'*='", "'/='", "'%='", "'.'", 
            "'_'", "'('", "')'", "'{'", "'}'", "'['", "']'", "','", "';'", 
            "':'", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", "INTERFACE", 
            "STRING", "INT", "FLOAT", "BOOLEAN", "TRUE", "FALSE", "NIL", 
            "CONST", "VAR", "CONTINUE", "BREAK", "RANGE", "ASSIGN", "DECLARE", 
            "PLUS", "MINUS", "MUL", "DIV", "MOD", "EQ", "NEQ", "LT", "LEQ", 
            "GT", "GEQ", "AND", "OR", "NOT", "PLUS_ASSIGN", "MINUS_ASSIGN", 
            "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "DOT", "BLANK", "LPAREN", 
            "RPAREN", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "COMMA", 
            "SEMI", "COLON", "IDENTIFIER", "INT_LIT", "FLOAT_LIT", "STRING_LIT", 
            "BLOCK_COMMENT", "LINE_COMMENT", "WS", "NEWLINE", "UNCLOSE_STRING", 
            "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    ruleNames = [ "T__0", "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", 
                  "STRUCT", "INTERFACE", "STRING", "INT", "FLOAT", "BOOLEAN", 
                  "TRUE", "FALSE", "NIL", "CONST", "VAR", "CONTINUE", "BREAK", 
                  "RANGE", "ASSIGN", "DECLARE", "PLUS", "MINUS", "MUL", 
                  "DIV", "MOD", "EQ", "NEQ", "LT", "LEQ", "GT", "GEQ", "AND", 
                  "OR", "NOT", "PLUS_ASSIGN", "MINUS_ASSIGN", "MUL_ASSIGN", 
                  "DIV_ASSIGN", "MOD_ASSIGN", "DOT", "BLANK", "LPAREN", 
                  "RPAREN", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", 
                  "COMMA", "SEMI", "COLON", "IDENTIFIER", "INT_LIT", "DEC_LIT", 
                  "BIN_LIT", "OCT_LIT", "HEX_LIT", "FLOAT_LIT", "DEC_PART", 
                  "EXPONENT", "STRING_LIT", "ESC_SEQ", "BLOCK_COMMENT", 
                  "LINE_COMMENT", "WS", "NEWLINE", "UNCLOSE_STRING", "ILLEGAL_ESCAPE", 
                  "ERROR_CHAR" ]

    grammarFileName = "MiniGo.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    lastTokenType = None;
    def emit(self):
        tk = self.type
        self.lastTokenType = tk
        if tk == self.UNCLOSE_STRING:       
            result = super().emit();
            raise UncloseString(result.text);
        elif tk == self.ILLEGAL_ESCAPE:
            result = super().emit();
            raise IllegalEscape(result.text);
        elif tk == self.ERROR_CHAR:
            result = super().emit();
            raise ErrorToken(result.text); 
        else:
            return super().emit();


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[62] = self.STRING_LIT_action 
            actions[67] = self.NEWLINE_action 
            actions[68] = self.UNCLOSE_STRING_action 
            actions[69] = self.ILLEGAL_ESCAPE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STRING_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = self.text[1:-1]
     

    def NEWLINE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:

                lastToken = self.lastTokenType
                listAllowedToken = [   
                                    self.IDENTIFIER,
                                    self.INT_LIT,
                                    self.FLOAT_LIT,
                                    self.STRING_LIT,
                                    self.RPAREN,
                                    self.RBRACE,
                                    self.RBRACKET,
                                    self.INT,
                                    self.FLOAT,
                                    self.STRING,
                                    self.BOOLEAN,
                                    self.TRUE,
                                    self.FALSE
                                ]

                if lastToken in listAllowedToken:
                    self.text = ';';
                else:
                    self.skip();

     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            self.text = self.text[1:]
     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            self.text = self.text[1:]
     


