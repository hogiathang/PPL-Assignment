# Generated from d:/HK242/PPL/Assignment/B1/initial/src/main/minigo/parser/MiniGo.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,62,482,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,1,0,1,0,1,0,1,1,1,1,1,1,1,
        1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,
        4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,
        9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,
        1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,
        1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,
        1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,21,
        1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,
        1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,
        1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,36,
        1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,
        1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,
        1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,5,51,333,8,51,10,51,12,51,
        336,9,51,1,52,1,52,1,52,1,52,3,52,342,8,52,1,53,1,53,1,53,5,53,347,
        8,53,10,53,12,53,350,9,53,3,53,352,8,53,1,54,1,54,1,54,4,54,357,
        8,54,11,54,12,54,358,1,55,1,55,1,55,4,55,364,8,55,11,55,12,55,365,
        1,55,1,55,4,55,370,8,55,11,55,12,55,371,3,55,374,8,55,1,56,1,56,
        1,56,4,56,379,8,56,11,56,12,56,380,1,57,1,57,1,57,3,57,386,8,57,
        1,57,3,57,389,8,57,1,57,3,57,392,8,57,1,58,4,58,395,8,58,11,58,12,
        58,396,1,59,1,59,3,59,401,8,59,1,59,4,59,404,8,59,11,59,12,59,405,
        1,60,1,60,1,60,5,60,411,8,60,10,60,12,60,414,9,60,1,60,1,60,1,60,
        1,61,1,61,1,61,1,62,1,62,3,62,424,8,62,1,63,1,63,1,63,1,63,1,63,
        5,63,431,8,63,10,63,12,63,434,9,63,1,63,1,63,1,63,1,63,1,63,1,64,
        1,64,1,64,1,64,5,64,445,8,64,10,64,12,64,448,9,64,1,64,1,64,1,65,
        4,65,453,8,65,11,65,12,65,454,1,65,1,65,1,66,1,66,1,66,5,66,462,
        8,66,10,66,12,66,465,9,66,1,66,1,66,1,67,1,67,1,67,5,67,472,8,67,
        10,67,12,67,475,9,67,1,67,1,67,1,67,1,67,1,68,1,68,1,432,0,69,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
        25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,
        36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,
        47,95,48,97,49,99,50,101,51,103,52,105,53,107,0,109,0,111,0,113,
        0,115,54,117,0,119,0,121,55,123,0,125,56,127,57,129,58,131,59,133,
        60,135,61,137,62,1,0,16,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,
        95,97,122,1,0,49,57,1,0,48,57,2,0,66,66,98,98,1,0,48,49,2,0,79,79,
        111,111,1,0,48,55,2,0,88,88,120,120,3,0,48,57,65,70,97,102,2,0,69,
        69,101,101,2,0,43,43,45,45,4,0,10,10,13,13,34,34,92,92,5,0,34,34,
        92,92,110,110,114,114,116,116,2,0,10,10,13,13,3,0,9,10,12,13,32,
        32,502,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
        0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
        0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
        0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
        0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
        0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
        0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
        0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,
        0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,
        0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,
        0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,115,1,0,0,0,0,121,
        1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,
        0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,1,139,1,0,0,0,3,142,1,
        0,0,0,5,147,1,0,0,0,7,151,1,0,0,0,9,158,1,0,0,0,11,163,1,0,0,0,13,
        168,1,0,0,0,15,175,1,0,0,0,17,185,1,0,0,0,19,192,1,0,0,0,21,196,
        1,0,0,0,23,202,1,0,0,0,25,210,1,0,0,0,27,215,1,0,0,0,29,221,1,0,
        0,0,31,225,1,0,0,0,33,231,1,0,0,0,35,235,1,0,0,0,37,244,1,0,0,0,
        39,250,1,0,0,0,41,256,1,0,0,0,43,258,1,0,0,0,45,261,1,0,0,0,47,263,
        1,0,0,0,49,265,1,0,0,0,51,267,1,0,0,0,53,269,1,0,0,0,55,271,1,0,
        0,0,57,274,1,0,0,0,59,277,1,0,0,0,61,279,1,0,0,0,63,282,1,0,0,0,
        65,284,1,0,0,0,67,287,1,0,0,0,69,290,1,0,0,0,71,293,1,0,0,0,73,295,
        1,0,0,0,75,298,1,0,0,0,77,301,1,0,0,0,79,304,1,0,0,0,81,307,1,0,
        0,0,83,310,1,0,0,0,85,312,1,0,0,0,87,314,1,0,0,0,89,316,1,0,0,0,
        91,318,1,0,0,0,93,320,1,0,0,0,95,322,1,0,0,0,97,324,1,0,0,0,99,326,
        1,0,0,0,101,328,1,0,0,0,103,330,1,0,0,0,105,341,1,0,0,0,107,351,
        1,0,0,0,109,353,1,0,0,0,111,373,1,0,0,0,113,375,1,0,0,0,115,382,
        1,0,0,0,117,394,1,0,0,0,119,398,1,0,0,0,121,407,1,0,0,0,123,418,
        1,0,0,0,125,423,1,0,0,0,127,425,1,0,0,0,129,440,1,0,0,0,131,452,
        1,0,0,0,133,458,1,0,0,0,135,468,1,0,0,0,137,480,1,0,0,0,139,140,
        5,105,0,0,140,141,5,102,0,0,141,2,1,0,0,0,142,143,5,101,0,0,143,
        144,5,108,0,0,144,145,5,115,0,0,145,146,5,101,0,0,146,4,1,0,0,0,
        147,148,5,102,0,0,148,149,5,111,0,0,149,150,5,114,0,0,150,6,1,0,
        0,0,151,152,5,114,0,0,152,153,5,101,0,0,153,154,5,116,0,0,154,155,
        5,117,0,0,155,156,5,114,0,0,156,157,5,110,0,0,157,8,1,0,0,0,158,
        159,5,102,0,0,159,160,5,117,0,0,160,161,5,110,0,0,161,162,5,99,0,
        0,162,10,1,0,0,0,163,164,5,116,0,0,164,165,5,121,0,0,165,166,5,112,
        0,0,166,167,5,101,0,0,167,12,1,0,0,0,168,169,5,115,0,0,169,170,5,
        116,0,0,170,171,5,114,0,0,171,172,5,117,0,0,172,173,5,99,0,0,173,
        174,5,116,0,0,174,14,1,0,0,0,175,176,5,105,0,0,176,177,5,110,0,0,
        177,178,5,116,0,0,178,179,5,101,0,0,179,180,5,114,0,0,180,181,5,
        102,0,0,181,182,5,97,0,0,182,183,5,99,0,0,183,184,5,101,0,0,184,
        16,1,0,0,0,185,186,5,115,0,0,186,187,5,116,0,0,187,188,5,114,0,0,
        188,189,5,105,0,0,189,190,5,110,0,0,190,191,5,103,0,0,191,18,1,0,
        0,0,192,193,5,105,0,0,193,194,5,110,0,0,194,195,5,116,0,0,195,20,
        1,0,0,0,196,197,5,102,0,0,197,198,5,108,0,0,198,199,5,111,0,0,199,
        200,5,97,0,0,200,201,5,116,0,0,201,22,1,0,0,0,202,203,5,98,0,0,203,
        204,5,111,0,0,204,205,5,111,0,0,205,206,5,108,0,0,206,207,5,101,
        0,0,207,208,5,97,0,0,208,209,5,110,0,0,209,24,1,0,0,0,210,211,5,
        116,0,0,211,212,5,114,0,0,212,213,5,117,0,0,213,214,5,101,0,0,214,
        26,1,0,0,0,215,216,5,102,0,0,216,217,5,97,0,0,217,218,5,108,0,0,
        218,219,5,115,0,0,219,220,5,101,0,0,220,28,1,0,0,0,221,222,5,110,
        0,0,222,223,5,105,0,0,223,224,5,108,0,0,224,30,1,0,0,0,225,226,5,
        99,0,0,226,227,5,111,0,0,227,228,5,110,0,0,228,229,5,115,0,0,229,
        230,5,116,0,0,230,32,1,0,0,0,231,232,5,118,0,0,232,233,5,97,0,0,
        233,234,5,114,0,0,234,34,1,0,0,0,235,236,5,99,0,0,236,237,5,111,
        0,0,237,238,5,110,0,0,238,239,5,116,0,0,239,240,5,105,0,0,240,241,
        5,110,0,0,241,242,5,117,0,0,242,243,5,101,0,0,243,36,1,0,0,0,244,
        245,5,98,0,0,245,246,5,114,0,0,246,247,5,101,0,0,247,248,5,97,0,
        0,248,249,5,107,0,0,249,38,1,0,0,0,250,251,5,114,0,0,251,252,5,97,
        0,0,252,253,5,110,0,0,253,254,5,103,0,0,254,255,5,101,0,0,255,40,
        1,0,0,0,256,257,5,61,0,0,257,42,1,0,0,0,258,259,5,58,0,0,259,260,
        5,61,0,0,260,44,1,0,0,0,261,262,5,43,0,0,262,46,1,0,0,0,263,264,
        5,45,0,0,264,48,1,0,0,0,265,266,5,42,0,0,266,50,1,0,0,0,267,268,
        5,47,0,0,268,52,1,0,0,0,269,270,5,37,0,0,270,54,1,0,0,0,271,272,
        5,61,0,0,272,273,5,61,0,0,273,56,1,0,0,0,274,275,5,33,0,0,275,276,
        5,61,0,0,276,58,1,0,0,0,277,278,5,60,0,0,278,60,1,0,0,0,279,280,
        5,60,0,0,280,281,5,61,0,0,281,62,1,0,0,0,282,283,5,62,0,0,283,64,
        1,0,0,0,284,285,5,62,0,0,285,286,5,61,0,0,286,66,1,0,0,0,287,288,
        5,38,0,0,288,289,5,38,0,0,289,68,1,0,0,0,290,291,5,124,0,0,291,292,
        5,124,0,0,292,70,1,0,0,0,293,294,5,33,0,0,294,72,1,0,0,0,295,296,
        5,43,0,0,296,297,5,61,0,0,297,74,1,0,0,0,298,299,5,45,0,0,299,300,
        5,61,0,0,300,76,1,0,0,0,301,302,5,42,0,0,302,303,5,61,0,0,303,78,
        1,0,0,0,304,305,5,47,0,0,305,306,5,61,0,0,306,80,1,0,0,0,307,308,
        5,37,0,0,308,309,5,61,0,0,309,82,1,0,0,0,310,311,5,46,0,0,311,84,
        1,0,0,0,312,313,5,40,0,0,313,86,1,0,0,0,314,315,5,41,0,0,315,88,
        1,0,0,0,316,317,5,123,0,0,317,90,1,0,0,0,318,319,5,125,0,0,319,92,
        1,0,0,0,320,321,5,91,0,0,321,94,1,0,0,0,322,323,5,93,0,0,323,96,
        1,0,0,0,324,325,5,44,0,0,325,98,1,0,0,0,326,327,5,59,0,0,327,100,
        1,0,0,0,328,329,5,58,0,0,329,102,1,0,0,0,330,334,7,0,0,0,331,333,
        7,1,0,0,332,331,1,0,0,0,333,336,1,0,0,0,334,332,1,0,0,0,334,335,
        1,0,0,0,335,104,1,0,0,0,336,334,1,0,0,0,337,342,3,107,53,0,338,342,
        3,109,54,0,339,342,3,111,55,0,340,342,3,113,56,0,341,337,1,0,0,0,
        341,338,1,0,0,0,341,339,1,0,0,0,341,340,1,0,0,0,342,106,1,0,0,0,
        343,352,5,48,0,0,344,348,7,2,0,0,345,347,7,3,0,0,346,345,1,0,0,0,
        347,350,1,0,0,0,348,346,1,0,0,0,348,349,1,0,0,0,349,352,1,0,0,0,
        350,348,1,0,0,0,351,343,1,0,0,0,351,344,1,0,0,0,352,108,1,0,0,0,
        353,354,5,48,0,0,354,356,7,4,0,0,355,357,7,5,0,0,356,355,1,0,0,0,
        357,358,1,0,0,0,358,356,1,0,0,0,358,359,1,0,0,0,359,110,1,0,0,0,
        360,361,5,48,0,0,361,363,7,6,0,0,362,364,7,7,0,0,363,362,1,0,0,0,
        364,365,1,0,0,0,365,363,1,0,0,0,365,366,1,0,0,0,366,374,1,0,0,0,
        367,369,5,48,0,0,368,370,7,7,0,0,369,368,1,0,0,0,370,371,1,0,0,0,
        371,369,1,0,0,0,371,372,1,0,0,0,372,374,1,0,0,0,373,360,1,0,0,0,
        373,367,1,0,0,0,374,112,1,0,0,0,375,376,5,48,0,0,376,378,7,8,0,0,
        377,379,7,9,0,0,378,377,1,0,0,0,379,380,1,0,0,0,380,378,1,0,0,0,
        380,381,1,0,0,0,381,114,1,0,0,0,382,391,3,117,58,0,383,385,5,46,
        0,0,384,386,3,117,58,0,385,384,1,0,0,0,385,386,1,0,0,0,386,388,1,
        0,0,0,387,389,3,119,59,0,388,387,1,0,0,0,388,389,1,0,0,0,389,392,
        1,0,0,0,390,392,3,119,59,0,391,383,1,0,0,0,391,390,1,0,0,0,392,116,
        1,0,0,0,393,395,7,3,0,0,394,393,1,0,0,0,395,396,1,0,0,0,396,394,
        1,0,0,0,396,397,1,0,0,0,397,118,1,0,0,0,398,400,7,10,0,0,399,401,
        7,11,0,0,400,399,1,0,0,0,400,401,1,0,0,0,401,403,1,0,0,0,402,404,
        7,3,0,0,403,402,1,0,0,0,404,405,1,0,0,0,405,403,1,0,0,0,405,406,
        1,0,0,0,406,120,1,0,0,0,407,412,5,34,0,0,408,411,3,123,61,0,409,
        411,8,12,0,0,410,408,1,0,0,0,410,409,1,0,0,0,411,414,1,0,0,0,412,
        410,1,0,0,0,412,413,1,0,0,0,413,415,1,0,0,0,414,412,1,0,0,0,415,
        416,5,34,0,0,416,417,6,60,0,0,417,122,1,0,0,0,418,419,5,92,0,0,419,
        420,7,13,0,0,420,124,1,0,0,0,421,424,3,25,12,0,422,424,3,27,13,0,
        423,421,1,0,0,0,423,422,1,0,0,0,424,126,1,0,0,0,425,426,5,47,0,0,
        426,427,5,42,0,0,427,432,1,0,0,0,428,431,3,127,63,0,429,431,9,0,
        0,0,430,428,1,0,0,0,430,429,1,0,0,0,431,434,1,0,0,0,432,433,1,0,
        0,0,432,430,1,0,0,0,433,435,1,0,0,0,434,432,1,0,0,0,435,436,5,42,
        0,0,436,437,5,47,0,0,437,438,1,0,0,0,438,439,6,63,1,0,439,128,1,
        0,0,0,440,441,5,47,0,0,441,442,5,47,0,0,442,446,1,0,0,0,443,445,
        8,14,0,0,444,443,1,0,0,0,445,448,1,0,0,0,446,444,1,0,0,0,446,447,
        1,0,0,0,447,449,1,0,0,0,448,446,1,0,0,0,449,450,6,64,1,0,450,130,
        1,0,0,0,451,453,7,15,0,0,452,451,1,0,0,0,453,454,1,0,0,0,454,452,
        1,0,0,0,454,455,1,0,0,0,455,456,1,0,0,0,456,457,6,65,1,0,457,132,
        1,0,0,0,458,463,5,34,0,0,459,462,3,123,61,0,460,462,8,12,0,0,461,
        459,1,0,0,0,461,460,1,0,0,0,462,465,1,0,0,0,463,461,1,0,0,0,463,
        464,1,0,0,0,464,466,1,0,0,0,465,463,1,0,0,0,466,467,6,66,2,0,467,
        134,1,0,0,0,468,473,5,34,0,0,469,472,3,123,61,0,470,472,8,12,0,0,
        471,469,1,0,0,0,471,470,1,0,0,0,472,475,1,0,0,0,473,471,1,0,0,0,
        473,474,1,0,0,0,474,476,1,0,0,0,475,473,1,0,0,0,476,477,5,92,0,0,
        477,478,8,13,0,0,478,479,6,67,3,0,479,136,1,0,0,0,480,481,9,0,0,
        0,481,138,1,0,0,0,27,0,334,341,348,351,358,365,371,373,380,385,388,
        391,396,400,405,410,412,423,430,432,446,454,461,463,471,473,4,1,
        60,0,6,0,0,1,66,1,1,67,2
    ]

class MiniGoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    ELSE = 2
    FOR = 3
    RETURN = 4
    FUNC = 5
    TYPE = 6
    STRUCT = 7
    INTERFACE = 8
    STRING = 9
    INT = 10
    FLOAT = 11
    BOOLEAN = 12
    TRUE = 13
    FALSE = 14
    NIL = 15
    CONST = 16
    VAR = 17
    CONTINUE = 18
    BREAK = 19
    RANGE = 20
    ASSIGN = 21
    DECLARE = 22
    PLUS = 23
    MINUS = 24
    MUL = 25
    DIV = 26
    MOD = 27
    EQ = 28
    NEQ = 29
    LT = 30
    LEQ = 31
    GT = 32
    GEQ = 33
    AND = 34
    OR = 35
    NOT = 36
    PLUS_ASSIGN = 37
    MINUS_ASSIGN = 38
    MUL_ASSIGN = 39
    DIV_ASSIGN = 40
    MOD_ASSIGN = 41
    DOT = 42
    LPAREN = 43
    RPAREN = 44
    LBRACE = 45
    RBRACE = 46
    LBRACKET = 47
    RBRACKET = 48
    COMMA = 49
    SEMI = 50
    COLON = 51
    IDENTIFIER = 52
    INT_LIT = 53
    FLOAT_LIT = 54
    STRING_LIT = 55
    BOOL_LIT = 56
    BLOCK_COMMENT = 57
    LINE_COMMENT = 58
    WS = 59
    UNCLOSE_STRING = 60
    ILLEGAL_ESCAPE = 61
    ERROR_CHAR = 62

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'for'", "'return'", "'func'", "'type'", "'struct'", 
            "'interface'", "'string'", "'int'", "'float'", "'boolean'", 
            "'true'", "'false'", "'nil'", "'const'", "'var'", "'continue'", 
            "'break'", "'range'", "'='", "':='", "'+'", "'-'", "'*'", "'/'", 
            "'%'", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'&&'", 
            "'||'", "'!'", "'+='", "'-='", "'*='", "'/='", "'%='", "'.'", 
            "'('", "')'", "'{'", "'}'", "'['", "']'", "','", "';'", "':'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", "INTERFACE", 
            "STRING", "INT", "FLOAT", "BOOLEAN", "TRUE", "FALSE", "NIL", 
            "CONST", "VAR", "CONTINUE", "BREAK", "RANGE", "ASSIGN", "DECLARE", 
            "PLUS", "MINUS", "MUL", "DIV", "MOD", "EQ", "NEQ", "LT", "LEQ", 
            "GT", "GEQ", "AND", "OR", "NOT", "PLUS_ASSIGN", "MINUS_ASSIGN", 
            "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "DOT", "LPAREN", "RPAREN", 
            "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "COMMA", "SEMI", 
            "COLON", "IDENTIFIER", "INT_LIT", "FLOAT_LIT", "STRING_LIT", 
            "BOOL_LIT", "BLOCK_COMMENT", "LINE_COMMENT", "WS", "UNCLOSE_STRING", 
            "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    ruleNames = [ "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", 
                  "INTERFACE", "STRING", "INT", "FLOAT", "BOOLEAN", "TRUE", 
                  "FALSE", "NIL", "CONST", "VAR", "CONTINUE", "BREAK", "RANGE", 
                  "ASSIGN", "DECLARE", "PLUS", "MINUS", "MUL", "DIV", "MOD", 
                  "EQ", "NEQ", "LT", "LEQ", "GT", "GEQ", "AND", "OR", "NOT", 
                  "PLUS_ASSIGN", "MINUS_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
                  "MOD_ASSIGN", "DOT", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
                  "LBRACKET", "RBRACKET", "COMMA", "SEMI", "COLON", "IDENTIFIER", 
                  "INT_LIT", "DEC_LIT", "BIN_LIT", "OCT_LIT", "HEX_LIT", 
                  "FLOAT_LIT", "DEC_PART", "EXPONENT", "STRING_LIT", "ESC_SEQ", 
                  "BOOL_LIT", "BLOCK_COMMENT", "LINE_COMMENT", "WS", "UNCLOSE_STRING", 
                  "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    grammarFileName = "MiniGo.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def emit(self):
        tk = self.type
        if tk == self.UNCLOSE_STRING:       
            result = super().emit();
            raise UncloseString(result.text);
        elif tk == self.ILLEGAL_ESCAPE:
            result = super().emit();
            raise IllegalEscape(result.text);
        elif tk == self.ERROR_CHAR:
            result = super().emit();
            raise ErrorToken(result.text); 
        else:
            return super().emit();


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[60] = self.STRING_LIT_action 
            actions[66] = self.UNCLOSE_STRING_action 
            actions[67] = self.ILLEGAL_ESCAPE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STRING_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = self.text[1:-1]
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            self.text = self.text[1:]
     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            self.text = self.text[1:]
     


