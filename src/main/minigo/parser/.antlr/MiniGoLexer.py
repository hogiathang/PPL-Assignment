# Generated from d:/HK242/PPL/Assignment/B1/initial/src/main/minigo/parser/MiniGo.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,62,478,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,
        3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,
        8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,
        1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,
        1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,257,8,17,1,18,
        1,18,1,18,1,18,1,19,1,19,5,19,265,8,19,10,19,12,19,268,9,19,1,20,
        1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,26,
        1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,31,
        1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,36,
        1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,
        1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,
        1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,52,
        1,52,1,52,3,52,351,8,52,1,53,1,53,1,54,1,54,5,54,357,8,54,10,54,
        12,54,360,9,54,1,55,1,55,1,55,5,55,365,8,55,10,55,12,55,368,9,55,
        1,56,1,56,1,56,5,56,373,8,56,10,56,12,56,376,9,56,1,57,1,57,1,57,
        5,57,381,8,57,10,57,12,57,384,9,57,1,58,1,58,1,58,1,58,1,58,1,58,
        1,58,1,58,1,58,1,58,3,58,396,8,58,1,59,4,59,399,8,59,11,59,12,59,
        400,1,60,1,60,5,60,405,8,60,10,60,12,60,408,9,60,1,61,1,61,3,61,
        412,8,61,1,61,4,61,415,8,61,11,61,12,61,416,1,62,1,62,1,62,5,62,
        422,8,62,10,62,12,62,425,9,62,1,62,1,62,1,63,1,63,1,63,1,64,1,64,
        1,64,1,64,1,65,4,65,437,8,65,11,65,12,65,438,1,65,1,65,1,66,1,66,
        1,66,1,66,5,66,447,8,66,10,66,12,66,450,9,66,1,66,1,66,1,67,1,67,
        1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,5,68,465,8,68,10,68,
        12,68,468,9,68,1,68,1,68,1,68,1,69,1,69,1,70,1,70,1,71,1,71,0,0,
        72,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,
        35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,
        46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,0,109,0,111,
        0,113,0,115,0,117,54,119,0,121,0,123,0,125,55,127,0,129,56,131,57,
        133,58,135,59,137,0,139,60,141,61,143,62,1,0,18,3,0,65,90,95,95,
        97,122,4,0,48,57,65,90,95,95,97,122,1,0,49,57,1,0,48,57,2,0,88,88,
        120,120,3,0,48,57,65,70,97,102,2,0,79,79,111,111,1,0,48,55,2,0,66,
        66,98,98,1,0,48,49,2,0,69,69,101,101,2,0,43,43,45,45,2,0,34,34,92,
        92,5,0,34,34,92,92,110,110,114,114,116,116,3,0,9,9,13,13,32,32,2,
        0,10,10,13,13,1,0,42,42,1,0,47,47,490,0,1,1,0,0,0,0,3,1,0,0,0,0,
        5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
        1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
        1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
        1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
        1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,
        1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,
        1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,
        1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,
        1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,
        1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,
        105,1,0,0,0,0,117,1,0,0,0,0,125,1,0,0,0,0,129,1,0,0,0,0,131,1,0,
        0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,
        1,0,0,0,1,145,1,0,0,0,3,148,1,0,0,0,5,153,1,0,0,0,7,157,1,0,0,0,
        9,164,1,0,0,0,11,169,1,0,0,0,13,174,1,0,0,0,15,181,1,0,0,0,17,191,
        1,0,0,0,19,199,1,0,0,0,21,205,1,0,0,0,23,209,1,0,0,0,25,213,1,0,
        0,0,27,219,1,0,0,0,29,226,1,0,0,0,31,235,1,0,0,0,33,241,1,0,0,0,
        35,256,1,0,0,0,37,258,1,0,0,0,39,262,1,0,0,0,41,269,1,0,0,0,43,271,
        1,0,0,0,45,273,1,0,0,0,47,275,1,0,0,0,49,277,1,0,0,0,51,279,1,0,
        0,0,53,282,1,0,0,0,55,285,1,0,0,0,57,287,1,0,0,0,59,290,1,0,0,0,
        61,292,1,0,0,0,63,295,1,0,0,0,65,298,1,0,0,0,67,301,1,0,0,0,69,303,
        1,0,0,0,71,305,1,0,0,0,73,308,1,0,0,0,75,311,1,0,0,0,77,314,1,0,
        0,0,79,317,1,0,0,0,81,320,1,0,0,0,83,323,1,0,0,0,85,325,1,0,0,0,
        87,327,1,0,0,0,89,329,1,0,0,0,91,331,1,0,0,0,93,333,1,0,0,0,95,335,
        1,0,0,0,97,337,1,0,0,0,99,339,1,0,0,0,101,341,1,0,0,0,103,343,1,
        0,0,0,105,350,1,0,0,0,107,352,1,0,0,0,109,354,1,0,0,0,111,361,1,
        0,0,0,113,369,1,0,0,0,115,377,1,0,0,0,117,395,1,0,0,0,119,398,1,
        0,0,0,121,402,1,0,0,0,123,409,1,0,0,0,125,418,1,0,0,0,127,428,1,
        0,0,0,129,431,1,0,0,0,131,436,1,0,0,0,133,442,1,0,0,0,135,453,1,
        0,0,0,137,457,1,0,0,0,139,472,1,0,0,0,141,474,1,0,0,0,143,476,1,
        0,0,0,145,146,5,105,0,0,146,147,5,102,0,0,147,2,1,0,0,0,148,149,
        5,101,0,0,149,150,5,108,0,0,150,151,5,115,0,0,151,152,5,101,0,0,
        152,4,1,0,0,0,153,154,5,102,0,0,154,155,5,111,0,0,155,156,5,114,
        0,0,156,6,1,0,0,0,157,158,5,114,0,0,158,159,5,101,0,0,159,160,5,
        116,0,0,160,161,5,117,0,0,161,162,5,114,0,0,162,163,5,110,0,0,163,
        8,1,0,0,0,164,165,5,102,0,0,165,166,5,117,0,0,166,167,5,110,0,0,
        167,168,5,99,0,0,168,10,1,0,0,0,169,170,5,116,0,0,170,171,5,121,
        0,0,171,172,5,112,0,0,172,173,5,101,0,0,173,12,1,0,0,0,174,175,5,
        115,0,0,175,176,5,116,0,0,176,177,5,114,0,0,177,178,5,117,0,0,178,
        179,5,99,0,0,179,180,5,116,0,0,180,14,1,0,0,0,181,182,5,105,0,0,
        182,183,5,110,0,0,183,184,5,116,0,0,184,185,5,101,0,0,185,186,5,
        114,0,0,186,187,5,102,0,0,187,188,5,97,0,0,188,189,5,99,0,0,189,
        190,5,101,0,0,190,16,1,0,0,0,191,192,5,98,0,0,192,193,5,111,0,0,
        193,194,5,111,0,0,194,195,5,108,0,0,195,196,5,101,0,0,196,197,5,
        97,0,0,197,198,5,110,0,0,198,18,1,0,0,0,199,200,5,99,0,0,200,201,
        5,111,0,0,201,202,5,110,0,0,202,203,5,115,0,0,203,204,5,116,0,0,
        204,20,1,0,0,0,205,206,5,118,0,0,206,207,5,97,0,0,207,208,5,114,
        0,0,208,22,1,0,0,0,209,210,5,105,0,0,210,211,5,110,0,0,211,212,5,
        116,0,0,212,24,1,0,0,0,213,214,5,102,0,0,214,215,5,108,0,0,215,216,
        5,111,0,0,216,217,5,97,0,0,217,218,5,116,0,0,218,26,1,0,0,0,219,
        220,5,115,0,0,220,221,5,116,0,0,221,222,5,114,0,0,222,223,5,105,
        0,0,223,224,5,110,0,0,224,225,5,103,0,0,225,28,1,0,0,0,226,227,5,
        99,0,0,227,228,5,111,0,0,228,229,5,110,0,0,229,230,5,116,0,0,230,
        231,5,105,0,0,231,232,5,110,0,0,232,233,5,117,0,0,233,234,5,101,
        0,0,234,30,1,0,0,0,235,236,5,98,0,0,236,237,5,114,0,0,237,238,5,
        101,0,0,238,239,5,97,0,0,239,240,5,107,0,0,240,32,1,0,0,0,241,242,
        5,114,0,0,242,243,5,97,0,0,243,244,5,110,0,0,244,245,5,103,0,0,245,
        246,5,101,0,0,246,34,1,0,0,0,247,248,5,116,0,0,248,249,5,114,0,0,
        249,250,5,117,0,0,250,257,5,101,0,0,251,252,5,102,0,0,252,253,5,
        97,0,0,253,254,5,108,0,0,254,255,5,115,0,0,255,257,5,101,0,0,256,
        247,1,0,0,0,256,251,1,0,0,0,257,36,1,0,0,0,258,259,5,110,0,0,259,
        260,5,105,0,0,260,261,5,108,0,0,261,38,1,0,0,0,262,266,7,0,0,0,263,
        265,7,1,0,0,264,263,1,0,0,0,265,268,1,0,0,0,266,264,1,0,0,0,266,
        267,1,0,0,0,267,40,1,0,0,0,268,266,1,0,0,0,269,270,5,43,0,0,270,
        42,1,0,0,0,271,272,5,45,0,0,272,44,1,0,0,0,273,274,5,42,0,0,274,
        46,1,0,0,0,275,276,5,47,0,0,276,48,1,0,0,0,277,278,5,37,0,0,278,
        50,1,0,0,0,279,280,5,61,0,0,280,281,5,61,0,0,281,52,1,0,0,0,282,
        283,5,33,0,0,283,284,5,61,0,0,284,54,1,0,0,0,285,286,5,60,0,0,286,
        56,1,0,0,0,287,288,5,60,0,0,288,289,5,61,0,0,289,58,1,0,0,0,290,
        291,5,62,0,0,291,60,1,0,0,0,292,293,5,62,0,0,293,294,5,61,0,0,294,
        62,1,0,0,0,295,296,5,38,0,0,296,297,5,38,0,0,297,64,1,0,0,0,298,
        299,5,124,0,0,299,300,5,124,0,0,300,66,1,0,0,0,301,302,5,33,0,0,
        302,68,1,0,0,0,303,304,5,61,0,0,304,70,1,0,0,0,305,306,5,58,0,0,
        306,307,5,61,0,0,307,72,1,0,0,0,308,309,5,43,0,0,309,310,5,61,0,
        0,310,74,1,0,0,0,311,312,5,45,0,0,312,313,5,61,0,0,313,76,1,0,0,
        0,314,315,5,42,0,0,315,316,5,61,0,0,316,78,1,0,0,0,317,318,5,47,
        0,0,318,319,5,61,0,0,319,80,1,0,0,0,320,321,5,37,0,0,321,322,5,61,
        0,0,322,82,1,0,0,0,323,324,5,46,0,0,324,84,1,0,0,0,325,326,5,58,
        0,0,326,86,1,0,0,0,327,328,5,95,0,0,328,88,1,0,0,0,329,330,5,40,
        0,0,330,90,1,0,0,0,331,332,5,41,0,0,332,92,1,0,0,0,333,334,5,123,
        0,0,334,94,1,0,0,0,335,336,5,125,0,0,336,96,1,0,0,0,337,338,5,91,
        0,0,338,98,1,0,0,0,339,340,5,93,0,0,340,100,1,0,0,0,341,342,5,44,
        0,0,342,102,1,0,0,0,343,344,5,59,0,0,344,104,1,0,0,0,345,351,3,107,
        53,0,346,351,3,109,54,0,347,351,3,111,55,0,348,351,3,113,56,0,349,
        351,3,115,57,0,350,345,1,0,0,0,350,346,1,0,0,0,350,347,1,0,0,0,350,
        348,1,0,0,0,350,349,1,0,0,0,351,106,1,0,0,0,352,353,5,48,0,0,353,
        108,1,0,0,0,354,358,7,2,0,0,355,357,7,3,0,0,356,355,1,0,0,0,357,
        360,1,0,0,0,358,356,1,0,0,0,358,359,1,0,0,0,359,110,1,0,0,0,360,
        358,1,0,0,0,361,362,5,48,0,0,362,366,7,4,0,0,363,365,7,5,0,0,364,
        363,1,0,0,0,365,368,1,0,0,0,366,364,1,0,0,0,366,367,1,0,0,0,367,
        112,1,0,0,0,368,366,1,0,0,0,369,370,5,48,0,0,370,374,7,6,0,0,371,
        373,7,7,0,0,372,371,1,0,0,0,373,376,1,0,0,0,374,372,1,0,0,0,374,
        375,1,0,0,0,375,114,1,0,0,0,376,374,1,0,0,0,377,378,5,48,0,0,378,
        382,7,8,0,0,379,381,7,9,0,0,380,379,1,0,0,0,381,384,1,0,0,0,382,
        380,1,0,0,0,382,383,1,0,0,0,383,116,1,0,0,0,384,382,1,0,0,0,385,
        386,3,119,59,0,386,387,3,121,60,0,387,388,3,123,61,0,388,396,1,0,
        0,0,389,390,3,119,59,0,390,391,3,121,60,0,391,396,1,0,0,0,392,393,
        3,119,59,0,393,394,3,123,61,0,394,396,1,0,0,0,395,385,1,0,0,0,395,
        389,1,0,0,0,395,392,1,0,0,0,396,118,1,0,0,0,397,399,7,3,0,0,398,
        397,1,0,0,0,399,400,1,0,0,0,400,398,1,0,0,0,400,401,1,0,0,0,401,
        120,1,0,0,0,402,406,5,46,0,0,403,405,7,3,0,0,404,403,1,0,0,0,405,
        408,1,0,0,0,406,404,1,0,0,0,406,407,1,0,0,0,407,122,1,0,0,0,408,
        406,1,0,0,0,409,411,7,10,0,0,410,412,7,11,0,0,411,410,1,0,0,0,411,
        412,1,0,0,0,412,414,1,0,0,0,413,415,7,3,0,0,414,413,1,0,0,0,415,
        416,1,0,0,0,416,414,1,0,0,0,416,417,1,0,0,0,417,124,1,0,0,0,418,
        423,5,34,0,0,419,422,3,127,63,0,420,422,8,12,0,0,421,419,1,0,0,0,
        421,420,1,0,0,0,422,425,1,0,0,0,423,421,1,0,0,0,423,424,1,0,0,0,
        424,426,1,0,0,0,425,423,1,0,0,0,426,427,5,34,0,0,427,126,1,0,0,0,
        428,429,5,92,0,0,429,430,7,13,0,0,430,128,1,0,0,0,431,432,5,10,0,
        0,432,433,1,0,0,0,433,434,6,64,0,0,434,130,1,0,0,0,435,437,7,14,
        0,0,436,435,1,0,0,0,437,438,1,0,0,0,438,436,1,0,0,0,438,439,1,0,
        0,0,439,440,1,0,0,0,440,441,6,65,0,0,441,132,1,0,0,0,442,443,5,47,
        0,0,443,444,5,47,0,0,444,448,1,0,0,0,445,447,8,15,0,0,446,445,1,
        0,0,0,447,450,1,0,0,0,448,446,1,0,0,0,448,449,1,0,0,0,449,451,1,
        0,0,0,450,448,1,0,0,0,451,452,6,66,0,0,452,134,1,0,0,0,453,454,3,
        137,68,0,454,455,1,0,0,0,455,456,6,67,0,0,456,136,1,0,0,0,457,458,
        5,47,0,0,458,459,5,42,0,0,459,466,1,0,0,0,460,465,3,137,68,0,461,
        465,8,16,0,0,462,463,5,42,0,0,463,465,8,17,0,0,464,460,1,0,0,0,464,
        461,1,0,0,0,464,462,1,0,0,0,465,468,1,0,0,0,466,464,1,0,0,0,466,
        467,1,0,0,0,467,469,1,0,0,0,468,466,1,0,0,0,469,470,5,42,0,0,470,
        471,5,47,0,0,471,138,1,0,0,0,472,473,9,0,0,0,473,140,1,0,0,0,474,
        475,9,0,0,0,475,142,1,0,0,0,476,477,9,0,0,0,477,144,1,0,0,0,19,0,
        256,266,350,358,366,374,382,395,400,406,411,416,421,423,438,448,
        464,466,1,6,0,0
    ]

class MiniGoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    ELSE = 2
    FOR = 3
    RETURN = 4
    FUNC = 5
    TYPE = 6
    STRUCT = 7
    INTERFACE = 8
    BOOLEAN = 9
    CONST = 10
    VAR = 11
    INTERGER = 12
    FLOAT = 13
    STRING = 14
    CONTINUE = 15
    BREAK = 16
    RANGE = 17
    BOOLEANLIT = 18
    NILLIT = 19
    IDENTIFIER = 20
    ADDOP = 21
    SUBOP = 22
    MULOP = 23
    DIVOP = 24
    MODOP = 25
    EQUALOP = 26
    NOTEQUALOP = 27
    LESSOP = 28
    LESSEQUALOP = 29
    GREATEROP = 30
    GREATEREQUALOP = 31
    ANDOP = 32
    OROP = 33
    NOTOP = 34
    ASSIGNOP = 35
    SHORTASSIGNOP = 36
    INCASSIGNOP = 37
    DECASSIGNOP = 38
    MULASSIGNOP = 39
    DIVASSIGNOP = 40
    MODASSIGNOP = 41
    DOT = 42
    COLON = 43
    BLANK = 44
    LP = 45
    RP = 46
    LB = 47
    RB = 48
    LSB = 49
    RSB = 50
    COMMA = 51
    SEMI = 52
    INTLIT = 53
    FLOATLIT = 54
    STRINGLIT = 55
    NL = 56
    WS = 57
    COMMENT = 58
    MULTI_COMMENT = 59
    ERROR_CHAR = 60
    ILLEGAL_ESCAPE = 61
    UNCLOSE_STRING = 62

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'for'", "'return'", "'func'", "'type'", "'struct'", 
            "'interface'", "'boolean'", "'const'", "'var'", "'int'", "'float'", 
            "'string'", "'continue'", "'break'", "'range'", "'nil'", "'+'", 
            "'-'", "'*'", "'/'", "'%'", "'=='", "'!='", "'<'", "'<='", "'>'", 
            "'>='", "'&&'", "'||'", "'!'", "'='", "':='", "'+='", "'-='", 
            "'*='", "'/='", "'%='", "'.'", "':'", "'_'", "'('", "')'", "'{'", 
            "'}'", "'['", "']'", "','", "';'", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", "INTERFACE", 
            "BOOLEAN", "CONST", "VAR", "INTERGER", "FLOAT", "STRING", "CONTINUE", 
            "BREAK", "RANGE", "BOOLEANLIT", "NILLIT", "IDENTIFIER", "ADDOP", 
            "SUBOP", "MULOP", "DIVOP", "MODOP", "EQUALOP", "NOTEQUALOP", 
            "LESSOP", "LESSEQUALOP", "GREATEROP", "GREATEREQUALOP", "ANDOP", 
            "OROP", "NOTOP", "ASSIGNOP", "SHORTASSIGNOP", "INCASSIGNOP", 
            "DECASSIGNOP", "MULASSIGNOP", "DIVASSIGNOP", "MODASSIGNOP", 
            "DOT", "COLON", "BLANK", "LP", "RP", "LB", "RB", "LSB", "RSB", 
            "COMMA", "SEMI", "INTLIT", "FLOATLIT", "STRINGLIT", "NL", "WS", 
            "COMMENT", "MULTI_COMMENT", "ERROR_CHAR", "ILLEGAL_ESCAPE", 
            "UNCLOSE_STRING" ]

    ruleNames = [ "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", 
                  "INTERFACE", "BOOLEAN", "CONST", "VAR", "INTERGER", "FLOAT", 
                  "STRING", "CONTINUE", "BREAK", "RANGE", "BOOLEANLIT", 
                  "NILLIT", "IDENTIFIER", "ADDOP", "SUBOP", "MULOP", "DIVOP", 
                  "MODOP", "EQUALOP", "NOTEQUALOP", "LESSOP", "LESSEQUALOP", 
                  "GREATEROP", "GREATEREQUALOP", "ANDOP", "OROP", "NOTOP", 
                  "ASSIGNOP", "SHORTASSIGNOP", "INCASSIGNOP", "DECASSIGNOP", 
                  "MULASSIGNOP", "DIVASSIGNOP", "MODASSIGNOP", "DOT", "COLON", 
                  "BLANK", "LP", "RP", "LB", "RB", "LSB", "RSB", "COMMA", 
                  "SEMI", "INTLIT", "ZERO", "DEC", "HEX", "OCT", "BIN", 
                  "FLOATLIT", "INT", "FRAC", "FIC", "STRINGLIT", "ESCAPE", 
                  "NL", "WS", "COMMENT", "MULTI_COMMENT", "NESTED_COMMENT", 
                  "ERROR_CHAR", "ILLEGAL_ESCAPE", "UNCLOSE_STRING" ]

    grammarFileName = "MiniGo.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def emit(self):
        tk = self.type
        if tk == self.UNCLOSE_STRING:       
            result = super().emit();
            raise UncloseString(result.text);
        elif tk == self.ILLEGAL_ESCAPE:
            result = super().emit();
            raise IllegalEscape(result.text);
        elif tk == self.ERROR_CHAR:
            result = super().emit();
            raise ErrorToken(result.text); 
        else:
            return super().emit();


