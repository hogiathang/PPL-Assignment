
        type Shape interface {
            Area() float
            Perimeter() float
        }

        type Rectangle struct {
            Width  float
            Height float
        }

        func (r Rectangle) Area() float {
            return r.Width * r.Height
        }

        func (r Rectangle) Perimeter() float {
            return 2 * (r.Width + r.Height)
        }

        type Circle struct {
            Radius float
        }

        func (c Circle) Area() float {
            return 3.14 * c.Radius * c.Radius
        }

        func (c Circle) Perimeter() float {
            return 2 * 3.14 * c.Radius
        }

        type Geometry struct {
            Name    string        // Primitive type (string)
            Sides   []int         // Array
            Shape   Shape         // Interface field
            Details Rectangle     // Nested struct
        }

        func main() {
            rect := Rectangle{Width: 10, Height: 5}

            geo1 := Geometry{
                Name:    "My Rectangle",
                Sides:   []int{10, 5, 10, 5},
                Shape:   rect,
                Details: rect,
            }

            fmt.Println("Geometry 1:", geo1.Name)
            fmt.Println("Area:", geo1.Shape.Area())
            fmt.Println("Perimeter:", geo1.Shape.Perimeter())

            circle := Circle{Radius: 7}

            geo2 := Geometry{
                Name:    "My Circle",
                Sides:   []int{1}, // Array
                Shape:   circle,
                Details: rect,   // Nested struct
            }

            fmt.Println("
Geometry 2:", geo2.Name)
            fmt.Println("Area:", geo2.Shape.Area())
            fmt.Println("Perimeter:", geo2.Shape.Perimeter())
        }
        